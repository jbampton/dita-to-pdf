<?xml version='1.0' encoding='utf-8'?>
<xsl:stylesheet exclude-result-prefixes="ditaarch opentopic e" version="2.0" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xmlns:e="sample" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:opentopic="http://www.idiominc.com/opentopic" xmlns:opentopic-func="http://www.idiominc.com/opentopic/exsl/function" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:template name="getChapterPrefix"><xsl:variable as="element()*" name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)" /><xsl:variable as="element()*" name="chapter" select="$topicref/ancestor-or-self::*[contains(@class, ' map/topicref ')][parent::opentopic:map]" /><xsl:for-each select="$chapter[1]"><xsl:variable as="xs:string" name="topicType"><xsl:apply-templates mode="determineTopicType" select="." /></xsl:variable><xsl:choose><xsl:when test="$topicType = 'topicChapter'"><xsl:number count="*[contains(@class, ' bookmap/chapter ')]" format="1" /><xsl:text>–</xsl:text></xsl:when><xsl:when test="$topicType = ('topicAppendix', 'topicAppendices')"><xsl:number count="*[contains(@class, ' bookmap/appendix ')]" format="A" /><xsl:text>–</xsl:text></xsl:when></xsl:choose></xsl:for-each></xsl:template><!--title numbering--><xsl:variable name="e:number-levels" select="(true(), false(), false(), false())" /><xsl:template match="*[contains(@class, ' topic/topic ')]/*[contains(@class, ' topic/title ')]" mode="getTitle"><xsl:variable name="topic" select="ancestor-or-self::*[contains(@class, ' topic/topic ')][1]" /><xsl:variable name="id" select="$topic/@id" /><xsl:variable name="mapTopics" select="key('map-id', $id)" /><fo:inline><xsl:for-each select="$mapTopics[1]"><xsl:variable name="depth" select="count(ancestor-or-self::*[contains(@class, ' map/topicref')])" /><xsl:choose><xsl:when test="parent::opentopic:map and contains(@class, ' bookmap/bookmap ')" /><xsl:when test="ancestor-or-self::*[contains(@class, ' bookmap/frontmatter ') or&#xA;                                              contains(@class, ' bookmap/backmatter ')]" /><xsl:when test="ancestor-or-self::*[contains(@class, ' bookmap/appendix ')] and&#xA;                          $e:number-levels[$depth]"><xsl:number count="*[contains(@class, ' map/topicref ')]&#xA;                                [ancestor-or-self::*[contains(@class, ' bookmap/appendix ')]] " format="A.1.1" level="multiple" /></xsl:when><xsl:when test="$e:number-levels[$depth]"><xsl:number count="*[contains(@class, ' map/topicref ')]&#xA;                                [not(ancestor-or-self::*[contains(@class, ' bookmap/frontmatter ')])]" format="1.1" level="multiple" /></xsl:when></xsl:choose></xsl:for-each></fo:inline><xsl:value-of select="' '" /><xsl:apply-templates /></xsl:template><xsl:template match="*[contains(@class,' topic/fig ')]/*[contains(@class,' topic/title ')]"><fo:block xsl:use-attribute-sets="fig.title"><xsl:call-template name="commonattributes" /><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Figure.title'" /><xsl:with-param as="element()*" name="params"><number><xsl:apply-templates mode="fig.title-number" select="." /></number><title><xsl:apply-templates /></title></xsl:with-param></xsl:call-template></fo:block></xsl:template><xsl:template match="*[contains(@class, ' topic/fig ')]/*[contains(@class, ' topic/title ')]" mode="fig.title-number"><xsl:value-of select="count(key('enumerableByClass', 'topic/fig')[. &lt;&lt; current()])" /></xsl:template></xsl:stylesheet>